/** @mainpage
Vypracoval: Jakub Suchý  rok: 2011/2012\n
Pro předmět: Algoritmy a datové struktury II (NTIN061)\n

## Zadání:
- Implementace algoritmu pro rychlé hledání bodu v rovině.\n
- Vytvoření datové struktury pro předzpracování roviny.\n

## Algoritmus:
### Předzpracování:
1. Načteme rovinu. (Předpokládáme, že rovina je Voronův diagram nebo rovinný graf uzavřený na polygony.)\n
2. Seřadíme body podle Y souřadnice.\n
3. Vytvoříme n-1 pásů z dvojic bodů jdoucích za sebou. (Předpokládáme že každá Y souřadnice je unikátní. Když není, tak celou rovinu trošku pootočíme, smažeme pásy a vrátíme se k bodu 2.)\n
4. Postupně projdeme všechny body odzhora dolů a pro každý bod B:\n
- 5. Odstraníme hrany vedoucí směřem nad bod B.\n
- 6. Přidáme hrany vedoucí směrem pod bod B.\n
- 7. Do pásu, který ohraničoval bod B zezhora, uložíme aktuální verzi perzistentního stromu.\n

### Hledání:
1. Binárním vyhledáváním nalezneme pás kde leží Y souřadnice hledaného bodu.\n
2. Vyhledáme dvě hrany v perzistentním stromu, které zleva a zprava ohraničují hledaný bod.\n
3. Z nalezených hran určíme ID polygonu, ve kterém se hledaný bod nachází.\n

pozn. Body, ležící na hranách nebo na okrajích hran, se vyhodnocují jako kdyby leželi nalevo od hrany.

## Složitost:
### Předzpracování:
1. O(n) čas, O(n) prostor\n
2. O(n*log n) čas, O(n) prostor\n
3. O(n) čas, O(n) prostor\n
4. O(n) čas\n
- 5. O(log n) čas, O(log n) prostor\n
- 6. O(log n) čas, O(log n) prostor\n
- 7. O(1) čas, O(log n) prostor\n

### Hledání:
1. O(log n) čas\n
2. O(log n) čas\n
3. O(1) čas\n

Celkem tedy:\n
- Předzpracování: O(n*log n) čas a O(n*log n) prostor(díky perzistentnímu stromu).\n
- Hledání: O(log n) čas.\n

## Perzistentní AVL strom:
- Perzistentní AVL strom je téměř stejný jako obyčejný AVL strom. \n
- Pokud chceme několik verzí stormu, tak normální AVL musíme celý zkopírovat.
  Perzistentní AVL nemusíme celý kopírovat. Ten si verze vytváří sám při každém přidání nebo odebrání vrcholu.\n
- Funguje to na pricipu "path copying" tzn. kopírování cesty.
  Při přidání/odebrání se nejdřív najde vrchol, kterého se přidání/odebrání týká, a hned se zkopíruje cesta až ke kořeni s tím, že ostatní podstromy se na cestu jen připojí z předchozí verze.
  Poté se provede samotné přidání/odebrání, pak se provede vyvážení a následně se uloží kořen aktuálního stromu jako nová verze.\n
- Tato nová verze zabírá prostor o délce zkopírované cesty + nějaké konstanty při vyvažování.
  Jelikož je strom vyvážený, tak každá verze zabírá maximálně O(log n) prostoru a přidání/odebrání trvá furt O(log n) času.\n
- Nakonec tedy strom zabírá maximálně O(n*log n) prostoru, protože v našem algoritmu se každý vrchol jednou přidá a jednou odebere.\n

## Poděkování:
Nakonec bych rád poděkoval Kateřině Nevolové za její vypůjčení implemetace AVL stromu,\n
Janu Voborníkovi za pomoc při řešení některých detailů mé implementace a\n
Vladimíru Vondrušovi za pomoc s drobnou optimalizací kódu.\n \n
Reference:\n
- http://en.wikipedia.org/wiki/Point_location \n
- de Berg, Mark; van Kreveld, Marc; Overmars, Mark; Schwarzkopf, Otfried (2000). "Chapter 6: Point location". 
  Computational Geometry (2nd revised ed.). Springer-Verlag. pp. 121–146. ISBN 3-540-65620-0. \n
- Dobkin, David; Lipton, Richard J. (1976). "Multidimensional searching problems". SIAM Journal on Computing 5 (2): 181–186. doi:10.1137/0205015. \n
- Snoeyink, Jack (2004). "Chapter 34: "Point Location". In Goodman, Jacob E.; O'Rourke, Joseph. 
  Handbook of Discrete and Computational Geometry (2nd ed.). Chapman & Hall/CRC. ISBN 1-58488-301-4. \n
- Sarnak, Neil; Tarjan, Robert E. (1986). "Planar point location using persistent search trees". 
  Communications of the ACM 29 (7): 669–679. doi:10.1145/6138.6151. \n
- Edelsbrunner, Herbert; Guibas, Leonidas J.; Stolfi, Jorge (1986). "Optimal point location in a monotone subdivision". 
  SIAM Journal on Computing 15 (2): 317–340. doi:10.1137/0215023. \n
- Kirkpatrick, David G. (1983). "Optimal search in planar subdivisions". SIAM Journal on Computing 12 (1): 28–35. doi:10.1137/0212002. \n
 */